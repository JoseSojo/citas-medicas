// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                                          String    @id @default(uuid())
  name                                        String
  lastname                                    String
  email                                       String
  password                                    String
  cmeg_n                                      String?
  matricula                                   String?
  rif                                         String?
  ci                                          String
  createDate                                  DateTime?

  age                                         Int?

  // for doctor ?
  egresDate                                   String?
  egresUniversityId                           String?
  egresUniversityReference                    University?        @relation("current", fields: [egresUniversityId], references: [id])

  phoneCode                                   String?
  phoneNumber                                 String?

  role                                        String

  exacAddress                                 String?
  birthdate                                   String?

  universityId                                String?
  universityReference                         University?        @relation("cirujano", fields: [universityId], references: [id])

  speciality DoctroWithSpeciality[]
  schedule   Schedule[]

  doctor  Quotes[] @relation(name: "doctor")
  patient Quotes[] @relation(name: "patient")

  addressId        String?
  addressReference Address? @relation(fields: [addressId], references: [id])

  parentId        String?
  parentReference User?   @relation("sub", fields: [parentId], references: [id])
  children        User[]  @relation("sub")

  detail          UserDetail?
  socialMediaReference      SocialMediaByUser[]

  notificationFrom    Notification[]  @relation(name: "from")
  notificationFromTo  Notification[]  @relation(name: "to")
  university          University[]    @relation(name: "create")

  historys            History[]

  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  isDelete Boolean  @default(false)
}

model ConfigDocuments {
  id String @id @default(uuid())

  original String
  path     String
  ext      String

  use String?

  detail   UserDetail?
  isDelete Boolean     @default(false)
}

model UserDetail {
  id String @id @default(uuid())

  description String?

  photoId           String?          @unique
  photoReference    ConfigDocuments? @relation(fields: [photoId], references: [id])

  userId            String @unique
  userReference     User   @relation(fields: [userId], references: [id])

  createAt          DateTime            @default(now())
  updateAt          DateTime            @updatedAt
  isDelete          Boolean             @default(false)
}

model DoctroWithSpeciality {
  id                    String @id @default(uuid())

  userId                String
  userReference         User   @relation(fields: [userId], references: [id])

  specialityId          String
  specialityReference   Speciality @relation(fields: [specialityId], references: [id])

  date                  String
  universityId          String
  universityReference   University      @relation(fields: [universityId], references: [id])


  createAt              DateTime   @default(now())
  updateAt              DateTime   @updatedAt
  isDelete              Boolean    @default(false)
}

model University {
  id              String          @id         @default(uuid())
  name            String
  withAddress     UniversityWithAddress[]

  doctorCurrent   User[]            @relation("current")            

  doctors         DoctroWithSpeciality[]
  user            User[] @relation("cirujano")

  createId          String
  createReference   User                @relation("create", fields: [createId], references: [id])
  createAt          DateTime            @default(now())
  updateAt          DateTime            @updatedAt
  isDelete          Boolean             @default(false)
}

model UniversityWithAddress {
  id                    String            @id         @default(uuid())
  universityId          String
  universityReference   University        @relation(fields: [universityId], references: [id])
  adressId              String
  adressReference       Address           @relation(fields: [adressId], references: [id])
}

model Speciality {
  id String @id @default(uuid())

  name        String
  description String

  speciality DoctroWithSpeciality[]

  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  isDelete Boolean  @default(false)
}

model SocialMediaByUser {
  id        String        @id         @default(uuid())

  link      String
  username  String

  socialMediaId        String
  socialMediaReference SocialMedia @relation(fields: [socialMediaId], references: [id])

  userId        String
  userReference User    @relation(fields: [userId], references: [id])

  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  isDelete Boolean  @default(false)
}

model SocialMedia {
  id     String @id @default(uuid())
  name   String
  icoUrl String

  user    SocialMediaByUser[]

  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  isDelete Boolean  @default(false)
}

model Address {
  id String @id @default(uuid())

  description String

  parentId        String?
  parentReference Address?  @relation("sub", fields: [parentId], references: [id])
  children        Address[] @relation("sub")

  // addressToUser       AddressToUser[]
  user User[]
  university UniversityWithAddress[]

  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  isDelete Boolean  @default(false)
}

model Schedule {
  id          String @id @default(uuid())
  description String

  primary Boolean        @default(false)
  userId  String
  user    User           @relation(fields: [userId], references: [id])
  detail  ScheduleTime[]

  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  isDelete Boolean  @default(false)
}

model ScheduleTime {
  id String @id @default(uuid())

  day        String
  day_index  Int     @default(0)
  time_start String
  time_end   String?

  start_payload String @default("am")
  end_payload   String @default("pm")

  scheduleId        String
  scheduleReference Schedule @relation(fields: [scheduleId], references: [id])

  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  isDelete Boolean  @default(false)
}

model Notification {
  id String @id @default(uuid())

  read    Boolean @default(false)
  message String
  subject String?

  toId        String?
  toRole      String?
  toReference User?   @relation(fields: [toId], references: [id], name: "to")

  fromId        String?
  fromRole      String?
  fromReference User?   @relation(fields: [fromId], references: [id], name: "from")

  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  isDelete Boolean  @default(false)
}

model Quotes {
  id String @id @default(uuid())

  status  String @default("PROCESADO")
  message String

  doctorId        String
  doctorReference User   @relation(fields: [doctorId], references: [id], name: "doctor")

  patientId        String
  patientReference User   @relation(fields: [patientId], references: [id], name: "patient")

  quoteDetailId        String      @unique
  quoteDetailReference QuoteDetail @relation(fields: [quoteDetailId], references: [id])

  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  isDelete Boolean  @default(false)
}

model QuoteDetail {
  id String @id @default(uuid())

  starDoctor        Int    @default(0)
  descriptionDoctor String @default("")
  endDateDoctor     String @default("")

  starPatient        Int    @default(0)
  descriptionPatient String @default("")
  endDatePatient     String @default("")

  quote Quotes?

  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  isDelete Boolean  @default(false)
}

//
model StaticticsMonth {
  id String         @id         @default(uuid())

  monthNumber       Int
  monthName         String
  monthLabel        String

  objectName        String?
  objectId          String?
  objectReference   Boolean     @default(false)

  totalMonth Int

  totalDay1  Int
  totalDay2  Int
  totalDay3  Int
  totalDay4  Int
  totalDay5  Int
  totalDay6  Int
  totalDay7  Int
  totalDay8  Int
  totalDay9  Int
  totalDay10 Int
  totalDay11 Int
  totalDay12 Int
  totalDay13 Int
  totalDay14 Int
  totalDay15 Int
  totalDay16 Int
  totalDay17 Int
  totalDay18 Int
  totalDay19 Int
  totalDay20 Int
  totalDay21 Int
  totalDay22 Int
  totalDay23 Int
  totalDay24 Int
  totalDay25 Int
  totalDay26 Int
  totalDay27 Int
  totalDay28 Int
  totalDay29 Int
  totalDay30 Int
  totalDay31 Int
}

//
model StaticticsYear {
  id   String @id @default(uuid())
  year Int

  objectName String?
  objectId   String?
  objectReference   Boolean     @default(false)

  totalYear Int

  totalMonth1  Int
  totalMonth2  Int
  totalMonth3  Int
  totalMonth4  Int
  totalMonth5  Int
  totalMonth6  Int
  totalMonth7  Int
  totalMonth8  Int
  totalMonth9  Int
  totalMonth10 Int
  totalMonth11 Int
  totalMonth12 Int
}

model History {
  id                  String        @id         @default(uuid())

  objectName          String?
  objectId            String?
  objectReference     Boolean?           @default(false)

  userId              String        
  userReference       User              @relation(fields: [userId], references: [id])

  description String

  createAt                  DateTime @default(now())
}
